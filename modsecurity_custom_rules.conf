#https://www.feistyduck.com/books/modsecurity-handbook/modsecurity-rule-writing-workshop.pdf
#https://www.prosec-networks.com/en/blog/modsecurity-core-rule-sets-und-eigene-regeln/
#BLOCK REQUEST_URI
SecRule REQUEST_URI "@contains vulnerabilities" "id:980,phase:1,log,deny,ctl:debugLogLevel=9"
#Most applications will use the basic four methods, as allowed by the following rule:
# Accept only commonly used request methods
SecRule REQUEST_METHOD "!@rx ^(?:GET|HEAD|POST|OPTIONS)$" \
 "phase:1,t:none,block,msg:'Only standard request methods allowed',logdata:%{REQUEST_METHOD}"
Some applications may be using REST, in which case you may need to allow the PUT and DELETE methods:
# Accept only commonly used request methods + REST
SecRule REQUEST_METHOD "!@rx ^(?:GET|HEAD|POST|OPTIONS|PUT|DELETE)$" \
 "phase:1,t:none,block,msg:'Only standard request methods allowed',logdata:%{REQUEST_METHOD}"
The following rule can be used with applications that require full WebDAV support:
# Accept only commonly used request methods + WebDAV
SecRule REQUEST_METHOD "!@rx ^(?:GET|HEAD|POST|OPTIONS|PROPFIND|PROPPATCH|MKCOL|PUT|DELETE|\
COPY|MOVE|LOCK|UNLOCK)$" \
 "phase:1,t:none,block,msg:'Only standard and WebDAV request methods allowed',\
 logdata:%{REQUEST_METHOD}"

#BLOCK EMPTY User Agent
SecRule REQUEST_HEADERS:User-Agent "@pmFromFile bad-user-agents.txt" \
 "id:998,phase:1,t:none,block,msg:'Bad user agent'"
SecRule &REQUEST_HEADERS:User-Agent "@eq 0" \
     "id:'13009',phase:2,t:none,deny,status:406"
SecRule REQUEST_HEADERS:User-Agent "^$" \
     "id:'13006',phase:2,t:none,deny,status:406"
#Block Ip from file
SecRule REMOTE_ADDR "@ipMatchFromFile blacklist.txt" "id:997,phase:1,deny,status:403,msg:\'blacklist\'"
# Do not allow multipart/form-data content type, which is used for file uploads
SecRule REQUEST_HEADERS:Content-Type "@rx (?i)^multipart/form-data" \
 "phase:1,t:none,block,msg:'Content type multipart/form-data not allowed'"
# Detect invalid URL encoding in request URI
SecRule REQUEST_URI_RAW @validateUrlEncoding \
 "phase:1,pass,t:none,msg:'Invalid URL encoding in request URI'"
 # Detect invalid URL encoding
SecRule URLENCODED_ERROR "@eq 1" \
 "phase:2,pass,t:none,msg:'Invalid URL encoding detected'"

#RFI
#Remote File Inclusion
SecRule ARGS "@rx (?i)^(f|ht)tps?://([^/])" \
 phase:2,t:none,msg:'Remote file inclusion (RFI) attack'
#PHP strams code injection
SecRule ARGS "@rx (?i)^php://" \
 "phase:2,t:none,msg:'PHP php:// code injection'"
SecRule ARGS "@rx (?i)^data:" \
 "phase:2,t:none,msg:'PHP data: code injection'"
#PHP CODE INJECTION
#The following rule will detect a code injection attempt, but ignore XML documents, which use similar
#syntax:
SecRule ARGS "@rx <\?(?!xml)"

#The following rule will detect an attempt to inject SSI code:
SecRule ARGS|REQUEST_HEADERS "@rx (?i)<!--\W*?#\W*?(?:echo|exec|printenv|include)" \
 "phase:2,t:none,pass,msg:'SSI injection'"
#block empty request header
SecRule REQUEST_HEADERS_NAMES "!@rx (?i)^(\
Accept|\
Accept-Charset|\
Accept-Encoding|\
Accept-Language|\
Accept-Ranges|\
Authorization|\
Cache-Control|\
Cookie|\
Cookie2|\
Connection|\
Content-Encoding|\
Content-Language|\
Content-Length|\
Content-Location|\
Content-MD5|\`
Content-Type|\
Date|\
Expect|\
From|\
Host|\
If-Match|\
If-Modified-Since|\
If-None-Match|\
If-Range|\
If-Unmodified-Since|\
Keep-Alive|\
Pragma|\
Range|\
Referer|\
TE|\
Trailer|\
Transfer-Encoding|\
UA-CPU|\
User-Agent|\
Via\
5
)$" \
" id:999,phase:1,t:none,pass,msg:'Unknown request header'"

